# This is a basic workflow to help you get started with Actions

name: merge

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
    # branches: [ "main" ]
  pull_request:
    types: [ "closed" ]
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      env:
        default: "dev"
        description: "deploy environment - used on rollback-deploy mode"
        type: choice
        options:
          - dev
          - stg
          - prd
      mode:
        description: "which nebula CI/CD mode?"
        type: choice
        required: true
        options:
          - feature-branch
          - main-merge
          - tag-push
          - rollback-deploy

env:
  DOES_COMPUTE: ${{ inputs.env == 'dev' && inputs.mode == 'feature-branch' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  python_check:
    runs-on: ubuntu-latest
    steps:
      - name: do inputs get set on pull_request?
        run: |
          echo "event: ${{ github.event_name }}"
          echo "inputs.env: ${{ inputs.env }}"
          echo "${{ env.DOES_COMPUTE }}"
          echo "$DOES_COMPUTE"
      - name: python output
        shell: python
        id: check_status
        run: |
          import os

          mode = "${{ inputs.mode }}"
          env = "${{ inputs.env }}"

          modes_to_update = ["feature-branch", "main-merge", "tag-push"]
          is_rollback = mode == "rollback-deploy"
          is_prd = env == "prd"

          output_key="check"
          output_value=(mode in modes_to_update) or (is_rollback and not is_prd)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'{output_key}={output_value}', file=fh)
      - name: run check
        if: steps.check_status.outputs.check
        run: |
          echo "this ran!"
          echo "check = ${{ steps.check_status.outputs.check }}"
      - name: run check with True string (uppercase)
        if: steps.check_status.outputs.check == 'True'
        run: |
          echo "this ran!"
          echo "check = ${{ steps.check_status.outputs.check }}"
      - name: run check with true string (lowercase)
        if: steps.check_status.outputs.check == 'true'
        run: |
          echo "this ran!"
          echo "check = ${{ steps.check_status.outputs.check }}"
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Runs a single command using the runners shell
      - name: print shit
        run: |
          echo "event_type: ${{ github.event_name }}"
          echo "pr_merged? ${{ github.event.pull_request.merged }}"
          echo "ref: ${{ github.ref }}"
          echo "ref from env: $GITHUB_REF"
          echo "ref_name: ${{ github.ref_name }}"
          echo "workflow_ref: ${{ github.workflow_ref }}"
          echo "job_workflow_ref: ${{ github.job_workflow_ref }}"
          echo "base_ref: ${{ github.base_ref }}"
          echo "head_ref: ${{ github.head_ref }}"
          echo "sha: ${{ github.sha }}"
      - name: sleep time
        run: |
          sleep 60
  check_shit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@v2
        id: changed
        with:
          filters: |
            events: 'migrations/events/**'
            orion: 'migrations/orion/**'
            nebula: 'migrations/nebula/**'
    outputs:
      dbs: ${{ steps.changed.outputs.changes }}

  # some comments
  run-matrix:
    needs: check_shit
    runs-on: ubuntu-latest
    if: ${{ needs.check_shit.outputs.dbs != '[]' && needs.check_shit.outputs.dbs != '' }}
    strategy:
      matrix:
        db: ${{ fromJson(needs.check_shit.outputs.dbs) }}
        env: [ "dev", "stg"]
    steps:
      - name: print matrix
        run: |
          echo "matrix: ${{ matrix.db }} - ${{ matrix.env }}"

  some-job-after:
    needs: run-matrix
    if: ${{ !failure() && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: print matrix
        run: |
          echo "YOOOOOO THIS STILL RAN"
